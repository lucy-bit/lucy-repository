/**
 * Created with IntelliJ IDEA.
 * Description:
 * User: 86187
 * Date: 2019 -11 -19
 * Time: 23:38
 */
public class jicheng {
}
/*
继承
        entends——继承-》扩展
        1）作用：是为了代码的复用，因为包内类之间有重复的部分
        2）

        3）子类如何帮助父类构造：利用super关键字
        记住：如果子类继承了父类，一定要先帮助父类构造父类本身

        注意：子类继承父类，不会继承父类的构造函数，是利用super 显示的调用父类的构造函数

        4）访问顺序
        访问子类：父类中的静态代码块 -》子类中的静态代码块 -》父类中的实例代码块 -》父类中的构造方法 -》子类中的实例代码块 -》 子类中的构造方法

        5） protected——包的修饰访问限定修饰符
protected - 受保护的 -》主要体现在继承层次上
        要体现封装性，想设成私有的private，但是设成私有的后派生出的子类就不能访问它。所以引入protected，只有继承了它的子类才能访问，别的不行





        6）

        7） super和this

        Java是单继承语言，不可以一次性继承多个，但是可以多次继承以实现多继承的目的

        向上转型发生的时机:
        直接赋值
        方法传参
        方法返回

        直接赋值的方式我们已经演示了. 另外两种方式和直接赋值没有本质区别.
        方法传参
        向下转型的前提条件是父类已经引用了子类（向下转型后的类型）的对象
        多态
        1）重写/覆盖/复写Override:
        1、函数名相同
        2、函数参数列表相同
        3、返回值也要相同
        4、静态的方法和 private 不能被重写
        注意：子类的访问修饰限定符一定要大于等于父类的访问修饰限定符
        父类的方法不能是私有的?（因为在动态绑定阶段，如果父类的方法或属性是私有/static
     的，那么不能通过编译，无法取得父类地址，所以不行）
             重载Overload:
             1、函数名相同
             2、参数列表不同（个数、类型）
             3、返回值不做要求

             面试问题：重写和重载的区别是什么？


             2)    运行时绑定 （ 动态绑定）
             1、父类的引用 引用子类的对象
             2、父类和子类都有同名的覆盖方法（重写）
             javap -c反编译

             ctrl + o 即可重写构造方法

             3）动态绑定的原理（选学）（补充图片）

             1、在编译的时候还是调用 Animal的eat()方法的地址，但是在运行时系统
             底层做了这样一个动作 篡改了Animal的eat()方法的地址
             2、方法区：存放类的对象的信息
             注意： class对象存放在方法区（其他对象都在堆上）
             3、反射
             私有方法/属性 (private) 利用反射在类外也可以使用，甚至改掉
        4、
        方法表和class类型不会随着new的增多而增加，他们是与类型相对应的
        方法表在编译时产生

        4）
        定义静态方法（补充图片）


        5）理解多态
        字面意思：一种事物多种形态
        程序层次：有了面的向上转型, 动态绑定, 方法重写之后, 我们就可以使用 多态(polypeptide) 的形式来设计程序了.
        （？再看看）（drawMap)
        圈复杂度一般不超过10（下课自己看课件）
        构造方法内也可以发生多态（看20;35的例子）

        6)    抽象类
        1、不想让方法在类内实现，用abstract修饰。如果一个类包括抽象方法，这个类也必须是抽象类
        2、抽象类和普通类 最大的区别 是抽象类中有抽象方法
        3、抽象类是不能被实例化的，不能new
        4、抽象类存在的意义 -》肯定要被继承的
        5、抽象类一旦被继承，就要重写抽象方法
        6、一个类继承了抽象类，如果不想重写抽象类的方法，那么当前类需要设置为抽象类（可以选
        择重写，也可以不重写）
        7、抽象类前是不能加final的
        （补充课件内容）








        7）接口
        接口里只能包含抽象方法、并且定义的方法默认是public abstract
接口里面定义的成员属性默认是 public static final
写的时候尽量简洁 -》不用加上面所列内容
        类和接口的关系是 -》实现：implements
        接口和接口是 -》 extends（不能用implements，因为接口内不能重写）

        实现了接口一定要重写方法
        接口是可以实现多继承的，可以继承无数个
        提示, IDEA 中使用 ctrl + i 快速实现接口
        使用接口的两种方法：1）向上转型 2）传参进行向上转型（21：06）


        1、一个类，一个接口都要各自一个java文件

        面试问题：
        1、什么是多态？
        2、重写和重载的区别？
        3、super和this
        4、抽象类和接口的区别？
        5、访问修饰限定符了解吗？

        应用：
        多态、 抽象类、 接口怎么用*/
